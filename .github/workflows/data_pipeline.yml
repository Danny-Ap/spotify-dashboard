name: Spotify Data Pipeline

on:
  schedule:
    - cron: '0 */2 * * *'  # Every 2 hours
  workflow_dispatch:  # Manual trigger for testing

# Add permissions for the workflow
permissions:
  contents: write  # Allow writing to repository contents

jobs:
  run-pipeline:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}  # Use GitHub token for authentication
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        
    - name: Run Spotify Analytics Pipeline
      env:
        MONGODB_CONNECTION_STRING: ${{ secrets.MONGODB_CONNECTION_STRING }}
        SPOTIFY_CLIENT_ID: ${{ secrets.SPOTIFY_CLIENT_ID }}
        SPOTIFY_CLIENT_SECRET: ${{ secrets.SPOTIFY_CLIENT_SECRET }}
        SPOTIFY_ACCESS_TOKEN: ${{ secrets.SPOTIFY_ACCESS_TOKEN }}
        SPOTIFY_REFRESH_TOKEN: ${{ secrets.SPOTIFY_REFRESH_TOKEN }}
        GENIUS_TOKEN: ${{ secrets.GENIUS_TOKEN }}
        TZ: Europe/Brussels
      run: python main_pipeline.py
      
    - name: Check for log files
      run: |
        echo "📂 Checking contents of logs directory..."
        if [ -d "logs" ]; then
          echo "✅ logs/ directory exists"
          ls -la logs/
          echo "📊 Number of files: $(find logs/ -name "*.txt" | wc -l)"
          
          # Check if any log files have content
          for file in logs/*.txt; do
            if [ -f "$file" ]; then
              size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo "0")
              echo "📄 $file: $size bytes"
              if [ "$size" -gt "0" ]; then
                echo "✅ File has content"
              else
                echo "⚠️ File is empty"
              fi
            fi
          done
        else
          echo "❌ logs/ directory does not exist"
          mkdir -p logs
          echo "📁 Created logs/ directory"
        fi
        
    - name: Commit and push log files
      run: |
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Check if there are any log files to add
        if ls logs/*.txt 1> /dev/null 2>&1; then
          echo "📄 Found log files to commit:"
          ls -la logs/*.txt
          
          # Only commit files that have content (size > 0)
          has_content=false
          for file in logs/*.txt; do
            if [ -f "$file" ] && [ -s "$file" ]; then
              echo "✅ $file has content, will commit"
              has_content=true
            else
              echo "⚠️ $file is empty, skipping"
            fi
          done
          
          if [ "$has_content" = true ]; then
            # Add log files
            git add logs/*.txt
            
            # Check if there are changes to commit
            if ! git diff --staged --quiet; then
              echo "💾 Committing log files..."
              git commit -m "📊 Pipeline logs - $(date '+%Y-%m-%d %H:%M:%S UTC')"
              
              # Push changes
              echo "⬆️ Pushing to repository..."
              git push
              echo "✅ Log files committed and pushed successfully"
            else
              echo "ℹ️ No new changes to commit"
            fi
          else
            echo "⚠️ No log files with content found"
          fi
        else
          echo "⚠️ No .txt log files found in logs/ directory"
          echo "📁 Current logs/ directory contents:"
          ls -la logs/ 2>/dev/null || echo "Directory is empty or doesn't exist"
        fi
        
    - name: Pipeline Summary
      if: always()  # Run even if previous steps failed
      run: |
        echo "🎯 PIPELINE EXECUTION SUMMARY"
        echo "================================"
        echo "⏰ Execution time: $(date '+%Y-%m-%d %H:%M:%S UTC')"
        echo "🔄 Next scheduled run: Every 2 hours"
        echo "📊 Dashboard: Will be updated automatically"
        echo "📂 Logs: Check repository logs/ folder for details"
        
        # Show workflow status
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ Pipeline Status: SUCCESS"
        else
          echo "❌ Pipeline Status: FAILED"
        fi
